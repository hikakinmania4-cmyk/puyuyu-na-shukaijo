<%# views/index.ejs (最終完成版) %>
<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>🥺ぷゆゆな集会場🥺 - ぷゆゆ好きのための匿名掲示板</title>
<meta name="description" content="ぷゆゆ🥺好きがこぞって集まると噂の掲示板" />
<meta name="keywords" content="掲示板,匿名,雑談,趣味,ぷゆゆ" />
<meta property="og:title" content="🥺ぷゆゆな集会場🥺" />
<meta property="og:description" content="ぷゆゆ🥺好きがこぞって集まると噂の掲示板" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://hikakinmania4-cmyk.github.io/puyuyu-na-shukaijo/" />
<meta property="og:image" content="https://i.ibb.co/93Stdh8x/96a86591b41f.jpg" />
<meta name="twitter:card" content="summary_large_image" />
<meta name="author" content="puyuyu" />
<meta name="theme-color" content="#1565c0" />

<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>
<style>
  /* --- CSSスタイル（元のコードから変更なし） --- */
  :root{--primary:#1565c0;--accent:#0288d1;--bg:#f5f7fb;--card:#ffffff;--muted:#6b7280;--danger:#ef4444;--text-main:#111827;--text-muted:#6b7280;--border-color:#e5e7eb;}
  .dark-mode{--primary:#60a5fa;--accent:#38bdf8;--bg:#111827;--card:#1f2937;--muted:#9ca3af;--text-main:#f9fafb;--text-muted:#9ca3af;--border-color:#374151;}
  *{box-sizing:border-box}
  body{font-family: system-ui,-apple-system,"Segoe UI",Roboto,"Hiragin- Kaku Gothic ProN",Meiryo,sans-serif;background:var(--bg);margin:0;padding:0;color:var(--text-main);transition:background-color .3s,color .3s;}
  header{background:linear-gradient(90deg,var(--primary),var(--accent));color:#fff;padding:12px 16px;display:flex;align-items:center;gap:12px;flex-wrap:wrap;}
  header h1{margin:0;font-size:18px;flex-grow:1;word-break:break-all;}
  header .controls{display:flex;gap:8px;align-items:center;}
  header .userbox{font-size:13px; margin-left: auto; text-align:right;}
  header button, header a.btn { text-decoration: none; background:rgba(255,255,255,0.14);border:none;color:#fff;padding:6px 10px;border-radius:6px;cursor:pointer; display: inline-flex; align-items: center; gap: 6px; position:relative;}
  header button:hover, header a.btn:hover {background:rgba(255,255,255,0.22)}
  .wrap{max-width:1000px;margin:16px auto;padding:12px}
  .card{background:var(--card);border-radius:10px;padding:12px;box-shadow:0 2px 6px rgba(2,6,23,0.06);margin-bottom:12px;border:1px solid var(--border-color); transition: background-color .3s, border-color .3s;}
  .card h2{margin:0 0 8px 0;font-size:16px;color:var(--primary);word-break:break-all;}
  input[type="text"],textarea,select{width:100%;padding:8px;border:1px solid var(--border-color);border-radius:8px;font-size:14px;background:var(--card);color:var(--text-main);}
  textarea{min-height:80px;resize:vertical}
  .btn{background:var(--accent);color:#fff;border:none;padding:8px 12px;border-radius:8px;cursor:pointer;transition:background-color 0.2s;}
  .btn:disabled{background:var(--muted);cursor:not-allowed;}
  .btn.warn{background:var(--danger)}
  .btn.small{padding:6px 8px;font-size:13px;border-radius:6px}
  .search-box{display:flex;gap:8px;margin-bottom:12px;flex-wrap:wrap;}
  .sort-box{display:flex;gap:8px;margin-bottom:12px;flex-wrap:wrap; align-items: center;}
  .thread-item{padding:10px;border-radius:8px;border:1px solid var(--border-color);display:flex;flex-wrap:nowrap;align-items:center;gap:12px; margin-bottom: 8px;}
  .thread-link{font-weight:600;color:var(--primary);text-decoration:none; display:block;word-break:break-all;}
  .thread-info { flex-grow: 1; display: flex; min-width: 0; flex-direction: column; align-items: flex-start; gap: 4px; }
  .thread-tags{display:flex;flex-wrap:wrap;gap:4px;}
  .tag{background:var(--muted);color:var(--text-main);padding:2px 6px;border-radius:4px;font-size:11px;cursor:pointer; text-decoration: none;}
  .thread-title-wrapper{min-width:0;display:flex;align-items:center;gap:8px;}
  .thread-meta-info{display:flex;flex-direction:column;align-items:flex-end;flex-shrink:0;text-align:right;}
  .thread-preview-img{width:60px;height:60px;object-fit:cover;border-radius:6px;flex-shrink:0;}
  .meta{font-size:13px;color:var(--text-muted)}
  .pagination-controls{display:flex;justify-content:center;align-items:center;gap:12px;margin-top:16px;}
  /* ... 他のCSS ... */
</style>
</head>
<body>
  <header>
    <h1>🥺ぷゆゆな集会場🥺</h1>
    <div class="userbox"><span id="userDisplay"></span></div>
    <div class="controls">
      <a href="/puyuyu-na-shukaijo/" class="btn">🏠 ホーム</a>
      <button id="historyBtn">📜 履歴</button>
      <button id="settingsBtn">⚙️ 設定</button>
      <button id="themeToggleBtn">🌙</button>
      <button id="refreshBtn">🔄 更新</button>
    </div>
  </header>

  <div class="wrap" id="app">
    <div class="card">
      <h2>新しいスレッドを作成</h2>
      <input id="newTitle" type="text" placeholder="タイトル（#タグ でタグ付けできます）" style="margin-bottom:8px;">
      <input id="newName" type="text" placeholder="名前（任意）" style="margin-bottom:8px;">
      <textarea id="newText" placeholder="本文"></textarea>
      <!-- スレ立てフォームの残りは省略 -->
      <div style="margin-top:8px; display:flex; justify-content:flex-end;">
        <button class="btn" id="createThreadBtn">スレ作成</button>
      </div>
    </div>
    <div class="card">
      <h2>スレッド一覧</h2>
      <div class="search-box">
        <input type="text" id="searchInput" placeholder="タイトル検索 or #タグ名">
        <button id="searchBtn" class="btn small">検索</button>
      </div>
      <div class="sort-box">
        <span class="small-muted">並び替え:</span>
        <select id="sortSelect">
          <option value="newPost" selected>新着レス順</option>
          <option value="newThread">スレ立て順</option>
          <option value="manyRes">レス数順</option>
        </select>
      </div>

      <div id="threadListContainer">
        <% if (typeof allThreads !== 'undefined' && allThreads.length > 0) { %>
          <% allThreads.forEach(t => { %>
            <% const postCount = t.postCounter || 0; %>
            <div class="thread-item"
                 data-thread-id="<%= t.id %>"
                 data-last-updated-at="<%= t.lastUpdatedAt %>"
                 data-created-at="<%= t.createdAt %>"
                 data-post-counter="<%= postCount %>"
                 data-title="<%= t.title %>"
                 data-tags="<%= (t.tags || []).join(',') %>">
              <% if (t.previewImg) { %>
                <img src="<%= t.previewImg %>" class="thread-preview-img" alt="preview">
              <% } %>
              <div class="thread-info">
                <div class="thread-title-wrapper">
                  <a class="thread-link" href="thread-<%= t.id %>.html">
                    <%= t.title.replace(/#[\p{L}\p{N}_]+/ug, '').trim() %>
                  </a>
                </div>
                <div class="thread-tags">
                  <% (t.tags || []).forEach(tag => { %>
                    <a href="#" class="tag" data-tag="<%= tag %>"><%= tag %></a>
                  <% }) %>
                </div>
              </div>
              <div class="thread-meta-info">
                <div class="meta"><%= postCount %>レス</div>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <div class="small-muted">スレッドがありません。</div>
        <% } %>
      </div>
      <div id="paginationContainer"></div>
    </div>
  </div>

  <script>
    const firebaseConfig = { /* ... Firebase設定（変更なし） ... */ };
    let allThreads = [];

    document.addEventListener('DOMContentLoaded', () => {
      try { firebase.initializeApp(firebaseConfig); } catch(e) {}
      const db = firebase.database();

      // ページ読み込み時にHTMLからスレッド情報を読み込んでJSのデータとして復元
      document.querySelectorAll('#threadListContainer .thread-item').forEach(el => {
        allThreads.push({
            id: el.dataset.threadId,
            lastUpdatedAt: parseInt(el.dataset.lastUpdatedAt, 10),
            createdAt: parseInt(el.dataset.createdAt, 10),
            postCounter: parseInt(el.dataset.postCounter, 10),
            title: el.dataset.title,
            tags: el.dataset.tags ? el.dataset.tags.split(',') : [],
            element: el 
        });
      });

      // 検索・ソート機能のイベントリスナーを設定
      const sortSelect = document.getElementById('sortSelect');
      const searchInput = document.getElementById('searchInput');
      const searchBtn = document.getElementById('searchBtn');

      function displayThreads() { /* ... 前の回答で提示したdisplayThreads関数をここにコピー ... */ }

      if (sortSelect) sortSelect.onchange = displayThreads;
      if (searchBtn) searchBtn.onclick = displayThreads;
      if (searchInput) searchInput.onkeydown = (e) => { if(e.key === 'Enter') displayThreads(); };
      
      // スレッド作成ボタンのイベントリスナー
      const createThreadBtn = document.getElementById('createThreadBtn');
      if (createThreadBtn) {
        createThreadBtn.onclick = async () => {
          // 元のコードにあったスレッド作成ロジック
          // ...
          // 成功後、アラートを出してリロードを促す
          // alert('スレッドを作成しました。サイトの更新には最大5分かかります。');
        };
      }
      displayThreads(); // 初期表示
    });
  </script>
</body>
</html>